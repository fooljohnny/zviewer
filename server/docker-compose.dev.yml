version: '3.8'

services:
  # 数据库
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: zviewer
      POSTGRES_USER: zviewer
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zviewer -d zviewer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zviewer-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zviewer-network

  # Consul服务发现
  consul:
    image: consul:1.16
    ports:
      - "8500:8500"
    volumes:
      - ./consul/consul.json:/consul/config/consul.json:ro
      - ./consul/services:/consul/config/services:ro
    command: consul agent -config-dir=/consul/config
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 主服务器
  main-server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=development
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=zviewer
      - DB_PASSWORD=password
      - DB_NAME=zviewer
      - DB_SSLMODE=disable
      - JWT_SECRET=your-secret-key-change-in-production
      - JWT_EXPIRATION=24h
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./migrations:/app/migrations
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 媒体服务
  media-service:
    build:
      context: ./services/media
      dockerfile: Dockerfile
    environment:
      - PORT=8081
      - DATABASE_URL=postgres://zviewer:password@postgres:5432/zviewer?sslmode=disable
      - JWT_SECRET=your-secret-key-change-in-production
      - STORAGE_TYPE=local
      - LOCAL_STORAGE_PATH=/uploads/media
      - MAX_IMAGE_SIZE=104857600
      - MAX_VIDEO_SIZE=524288000
      - MAX_CONCURRENT_UPLOADS=10
      - UPLOAD_TIMEOUT=30
    ports:
      - "8081:8081"
    volumes:
      - media_uploads:/uploads/media
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 评论服务
  comments-service:
    build:
      context: ./services/comments
      dockerfile: Dockerfile
    environment:
      - PORT=8082
      - DATABASE_URL=postgres://zviewer:password@postgres:5432/zviewer?sslmode=disable
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 支付服务
  payments-service:
    build:
      context: ./services/payments
      dockerfile: Dockerfile
    environment:
      - PORT=8083
      - DATABASE_URL=postgres://zviewer:password@postgres:5432/zviewer?sslmode=disable
      - JWT_SECRET=your-secret-key-change-in-production
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 管理服务
  admin-service:
    build:
      context: ./services/admin
      dockerfile: Dockerfile
    environment:
      - ADMIN_PORT=8084
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=zviewer
      - DB_PASSWORD=password
      - DB_NAME=zviewer
      - JWT_SECRET=your-secret-key-change-in-production
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8084/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API网关
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./kong/kong.yml:/kong/kong.yml:ro
    depends_on:
      - main-server
      - media-service
      - comments-service
      - payments-service
      - admin-service
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx负载均衡
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - kong
    networks:
      - zviewer-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - zviewer-network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - zviewer-network

volumes:
  postgres_data:
  media_uploads:
  prometheus_data:
  grafana_data:

networks:
  zviewer-network:
    driver: bridge
